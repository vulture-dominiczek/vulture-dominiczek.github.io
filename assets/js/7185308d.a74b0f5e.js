"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5875],{1855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var i=n(7136),s=n(4848),o=n(8453);const a={title:"Thoughts on observability",tags:["systemdesign","cloud","kubernetes"]},r="Thoughts on observability",l={authorsImageUrls:[]},d=[{value:"Observability intro",id:"observability-intro",level:2},{value:"What the future will bring",id:"what-the-future-will-bring",level:2},{value:"How I done POC",id:"how-i-done-poc",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Everything is complicated, even those things that seem flat in their bleakness."})}),"\n",(0,s.jsx)(t.p,{children:"Debugging microservices application based on scarce information is one of those cases that I don't wish\nanyone. But it is how it is at my current project, so management started to put some measures in motion."}),"\n",(0,s.jsxs)(t.p,{children:["I reaserched topic a bit at work and a bit on my own and I have something to share - ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry is the future"}),". Bu it is still work in progress."]}),"\n",(0,s.jsx)(t.p,{children:"In this post I will tell you everything I learned."}),"\n",(0,s.jsx)(t.h2,{id:"observability-intro",children:"Observability intro"}),"\n",(0,s.jsxs)(t.p,{children:["When it comes to first (and most important) pillar of observability - logs, the first little revolution came with the invention of ",(0,s.jsx)(t.strong,{children:"Mapped Diagnostic Context"}),".  Neil Harrison described this method in the book ",(0,s.jsx)(t.em,{children:"Patterns for Logging Diagnostic Messages in Pattern Languages of Program Design 3, edited by R. Martin, D. Riehle, and F. Buschmann (Addison-Wesley, 1997)"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The beauty of the idea is it's simplicity. You put collection of key value pairs in thread local storage and\nimplicitly append them to logs each time the log message is created. As you know ids, names and other stuff can \"span\" multiple nested method calls and this really makes life a little bit easier. Beacause it 2025 all logging framework support it, but that's not all."}),"\n",(0,s.jsx)(t.p,{children:"Taking it one step further you could propagate this key values across threads and (eventually) service boundaries. Welcome to distributed tracing. Spring Boot covers all this stuff semi-automatically all you have to do is to configure proper tools (Zipkin-Brave or OTEL)."}),"\n",(0,s.jsx)(t.p,{children:"And finally golden standard Prometheus scrapes at given metrics exported from your Spring app on given endpoint and acts as a store for Grafana to display."}),"\n",(0,s.jsx)(t.p,{children:"These were the 3 components of Observability: Metrics, Logs and Traces."}),"\n",(0,s.jsx)(t.h2,{id:"what-the-future-will-bring",children:"What the future will bring"}),"\n",(0,s.jsxs)(t.p,{children:["Not so long ago ",(0,s.jsx)(t.strong,{children:"Open Telemetry"})," emerged as a standard for application instrumentation with all 3 observability components. State of providers is quite good - 40+ languages covered more or less exporting to\nvarious sinks like ELK stack, Grafana and Zipkin/Jaeger."]}),"\n",(0,s.jsx)(t.p,{children:"But to be honest I didn't find any easy to use out of the box tool to visualize these goods. Yes there is Grafana with extensions for Loki (logs) and tempo db (traces) but the documentation has holes and you can't just set everything in a day. Some Open Source dashboards exist to my knowledge but they are a little bit clunky to use and limited."}),"\n",(0,s.jsxs)(t.p,{children:["As usual complex stuff requires time and time is money. So I would look for the innovations in the commercial side of the topic. I even have my favourite ",(0,s.jsx)(t.strong,{children:"Lighstep"})," - now ServiceNow Cloud Observability is one such solution that can do it well. They market it as"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"possible to go all between logs traces and metrics"}),"\n",(0,s.jsx)(t.li,{children:"use AI to diagnose problems (interesting)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"But I'm not an architect and not planning to put my own money on the table so this has stay in the land of dreams for now."}),"\n",(0,s.jsx)(t.h2,{id:"how-i-done-poc",children:"How I done POC"}),"\n",(0,s.jsx)(t.p,{children:"At work I tried to setup Spring to send traces to Zipkin as Proof of Concept and it costed me a little bit of effort. Because there are 2 bridges (adapters) and 2 exporters there is a little bit of problem - mix any of the 2 up and it will break. Oh how I wish it would just break with explicit error! Instead it just does not send logs and go figure why."}),"\n",(0,s.jsxs)(t.p,{children:["Luckily I started with OTEL first and when I switched I saw mixed jars so after exluding otel from parent pom i got finally traces to zipkin. The next step was to actually propagate the trace id across services boundaries. I discovered a cool feature - a ",(0,s.jsx)(t.strong,{children:"baggage"}),". It's a key-value pairs collection that propagetes with traceId/spanId. If you set some config property (like remote-fields or something) you get it sent to other service for free."]}),"\n",(0,s.jsx)(t.p,{children:"As long as you use Spring stack to send requests the MDC gets exported as SimpleTextMap sent in a header."}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"Future is integration of all three pillars of observability."}),"\n",(0,s.jsx)(t.p,{children:"In time there eventually be a Open Source solution that enables you to switch between logs traces and metrics from single place and it will be to much of everyones joy."}),"\n",(0,s.jsx)(t.p,{children:"But for now waiting is all we can do."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}},7136:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024/12/15/","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-15.md","source":"@site/blog/2024-12-15.md","title":"Thoughts on observability","description":"Everything is complicated, even those things that seem flat in their bleakness.","date":"2024-12-15T00:00:00.000Z","tags":[{"inline":true,"label":"systemdesign","permalink":"/blog/tags/systemdesign"},{"inline":true,"label":"cloud","permalink":"/blog/tags/cloud"},{"inline":true,"label":"kubernetes","permalink":"/blog/tags/kubernetes"}],"readingTime":3.635,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Thoughts on observability","tags":["systemdesign","cloud","kubernetes"]},"unlisted":false,"prevItem":{"title":"Christmas with Quantum Mechanics","permalink":"/blog/2024/12/29/"},"nextItem":{"title":"Reflections after writing simple Spring Boot library","permalink":"/blog/2024/11/5/"}}')}}]);