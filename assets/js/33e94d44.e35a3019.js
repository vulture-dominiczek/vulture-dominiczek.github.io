"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6467],{7347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var s=n(1117),i=n(4848),o=n(8453);const r={title:"Introducing concurrency solver",tags:["microservices","distributed"]},a="Introducing Concurrency Solver",c={authorsImageUrls:[]},l=[{value:"Time space diagrams",id:"time-space-diagrams",level:2},{value:"Terminology",id:"terminology",level:3},{value:"Introducing Octopus",id:"introducing-octopus",level:3},{value:"Conclusion",id:"conclusion",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Lately at work most of the staff is puzzled with mysterious bug. In short there is a statemachine that\nprocesses movements in batches. But sometimes one particular movement is duplicated and nobody knows why..."}),"\n",(0,i.jsx)(t.p,{children:"I wish I could brag I solved it myself, but that is not the case. But it inspired me to dig a little bit in\ntheory how distributed systems/concurrency is reasoned about and visualized."}),"\n",(0,i.jsx)(t.h2,{id:"time-space-diagrams",children:"Time space diagrams"}),"\n",(0,i.jsx)(t.p,{children:"I have read about them in some book long ago and was looking for some time find the correct name. It's pretty niche\nconcept, but in my opinon unjustly. They are so good to visualize not only distributed systems but also concurrency."}),"\n",(0,i.jsx)(t.p,{children:"Let me show you."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(3460).A+"",width:"1229",height:"432"})}),"\n",(0,i.jsx)(t.p,{children:"This is the basic case of dirty read, var a is not lock and therefore instead of being increamented it is wrote twice\nwith same value 2. The example is pretty silly but you can imagine more complex scenarios where the drawing would come in handy."}),"\n",(0,i.jsx)(t.h3,{id:"terminology",children:"Terminology"}),"\n",(0,i.jsx)(t.p,{children:"So you can imagine that the horizontal lines and crossing arrows enforce partial ordering of the events. In cases of multithreading there is no\nmore to add but in case of distributed systems time flies different on each of the actors line."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"The cut"})," is any line cutting the diagram in half so that the partial ordering of the events is preseved. You can think of it as a snapshot or\nan instant in systems run. And it has associated with it a ",(0,i.jsx)(t.strong,{children:"global state"})," that corresponds to any variables on any actor alltogether."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"The run"})," is a particular combination of actions runs ",(0,i.jsx)(t.strong,{children:"while preserving the partial order"}),". So you remember that one thread can be faster in one\ngo and in other go it can be faster than the others for instance."]}),"\n",(0,i.jsx)(t.p,{children:"If we had two threads and their actions lined up next to each other, then at each increment we would have 3 options:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"thread 1 executes, thread 2 waits"}),"\n",(0,i.jsx)(t.li,{children:"thread 1 waits, thread 2 executes"}),"\n",(0,i.jsx)(t.li,{children:"both execute"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["So all possible runs would be 3^n with n pairs of actions. This is ",(0,i.jsx)(t.strong,{children:"the lattice"})," and from it we can generate all valid runs."]}),"\n",(0,i.jsx)(t.h3,{id:"introducing-octopus",children:"Introducing Octopus"}),"\n",(0,i.jsx)(t.p,{children:"So I thought - instead of instrumenting java code and what not, why not write little modelling tool in python. And reason about the correct concurrency\npatters by enummerating all of the runs."}),"\n",(0,i.jsx)(t.p,{children:'The tool that I wrote has one shared dictionary and multiple threads "processes". Processes interact with the shared state by several primitives:'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"read at path"}),"\n",(0,i.jsx)(t.li,{children:"write at path"}),"\n",(0,i.jsx)(t.li,{children:"compute next local state on old local state"}),"\n",(0,i.jsx)(t.li,{children:"lock at path"}),"\n",(0,i.jsx)(t.li,{children:"unlock at path"}),"\n",(0,i.jsx)(t.li,{children:"noop (for testing purposes)"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"It turns out that locking,writing and reading on XPath is really powerful and I think you can model with it any concurrency problem I know - for example\nDining Philosophers."}),"\n",(0,i.jsxs)(t.p,{children:["So ",(0,i.jsx)(t.a,{href:"https://github.com/vulture-dominiczek/octopus",children:"here"})," it is."]}),"\n",(0,i.jsx)(t.p,{children:"To tease it up a little bit modelling looks like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"\nimport os, sys\n\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\n\nfrom core import DataTransfer\nfrom api import Octo\nfrom config import PrintOpts\n\n# PrintOpts.PRINT_LOCALS = False\n\nOcto.init_shared_state({ 'a': 1})\n\np1 = Octo.process(name = 'Alice')\np2  = Octo.process(name = 'Bob')\n\n\n\ndef incA(locals):\n    locals['a'] += 1\n\np1.read([DataTransfer(from_path='a', to_path='a')])\np1.compute(incA, description='Increment a')\np1.write([DataTransfer(from_path='a', to_path='a')])\n\n\np2.read([DataTransfer(from_path='a', to_path='a')])\np2.compute(incA, description='Increment a')\np2.write([DataTransfer(from_path='a', to_path='a')])\n\nOcto.solve_lattice(output='output.txt', validity_check={'a': 3})\n"})}),"\n",(0,i.jsxs)(t.p,{children:["About aforementioned problem here is solver output ",(0,i.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(4149).A+"",children:"without locks"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["And here is with ",(0,i.jsx)(t.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(1866).A+"",children:"locks"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"I wish I also add messaging to the tool if I have more time in the future."}),"\n",(0,i.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"Time flies when you are having fun. If I had to reason about concurrency issues I would use such tool I just created to ennumerate all the runs\nand print out where the issue is."}),"\n",(0,i.jsx)(t.p,{children:"Thanks"})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4149:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/files/out1-f35b5df04c897ebe8aba7052231e4b69.txt"},1866:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/files/out2-fbe203ee6c2e1365852619c5f420b65a.txt"},3460:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/synchronization-dbc9b26836047fe459e817fc7eff85b0.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},1117:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/01/18/","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-18.md","source":"@site/blog/2025-01-18.md","title":"Introducing concurrency solver","description":"Lately at work most of the staff is puzzled with mysterious bug. In short there is a statemachine that","date":"2025-01-18T00:00:00.000Z","tags":[{"inline":true,"label":"microservices","permalink":"/blog/tags/microservices"},{"inline":true,"label":"distributed","permalink":"/blog/tags/distributed"}],"readingTime":3.125,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Introducing concurrency solver","tags":["microservices","distributed"]},"unlisted":false,"nextItem":{"title":"My exploration of WASM/WASI","permalink":"/blog/2025/01/10/"}}')}}]);