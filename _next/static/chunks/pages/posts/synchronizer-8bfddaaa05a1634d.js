(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[448],{3905:function(e,t,n){"use strict";n.d(t,{kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"===typeof e?e(t):a(a({},t),e)),n},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,y=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return n?r.createElement(y,a(a({ref:t},h),{},{components:n})):r.createElement(y,a({ref:t},h))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"===typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"===typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8135:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/synchronizer",function(){return n(2650)}])},2650:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});n(7294);var r=n(3905),o=n(9008);function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a={},l=function(e){var t=e.children;return(0,r.kt)("main",{className:"md:w-3/5 text-lg mr-auto ml-auto mt-20 pb-20 article"},t)};function c(e){var t=e.components,n=i(e,["components"]);return(0,r.kt)(l,Object.assign({},a,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.default,{mdxType:"Head"},(0,r.kt)("script",{defer:!0},"hljs.highlightAll();"),(0,r.kt)("title",null,"Waiting on arbitrary condition in Java"),(0,r.kt)("meta",{name:"Description",content:"Waiting on arbitrary condition in Java"})),(0,r.kt)("h1",null,"Waiting on arbitrary condition in Java"),(0,r.kt)("p",null,"I was playing a little with the synchronization primitives in Java lately. Every Java programmer\nknows basic mechanism: you wait on some object and notify one or all threads from some other thread.\nEvery Java object has ",(0,r.kt)("b",null,"monitor object")," associated with it on which you synchronize. But here is\ncool problem: ",(0,r.kt)("b",null,"what if you wanted to wait on some logical condition?"),". I was thinking about it\nand I think I solved it. What follows is nifty little tool with code with explanations. "),(0,r.kt)("h3",null,"The problem"),(0,r.kt)("p",null,"You want to put the thread to sleep and awaken it only if some logical condition is true. So basically\nyou need to invoke ",(0,r.kt)("b",null,"wait()")," on some object and call ",(0,r.kt)("b",null,"notify()")," from some other thread. But this\nis not close yet. The problem is how you enforce the condition."),(0,r.kt)("p",null,"What we can do is to ",(0,r.kt)("b",null,"associate lock object with Predicate","<","E",">"),". First create the object\nthat will serve as a lock. Then associate it with the predicate. And then call wait on this object.\nSome time later other thread will get that pair and run time predicate with some value. If predicate\nevaluates to true then it will call notify. Because we have one thread per lock this particular thread\nwaiting will be woken up. "),(0,r.kt)("p",null,"Here how it looks in the code..."),(0,r.kt)("h3",null,"The code"),(0,r.kt)("pre",{className:"mt-8"},(0,r.kt)("code",{className:"language-java"},'\n public class Synchronizer<T> {\n    record LockEntry<E>(Predicate<E> condition, Object lock) {\n    }\n\n    private final LinkedList<LockEntry<T>> locks = new LinkedList<>();\n\n    public void waitOnCondition(Predicate<T> condition, long timeout) {\n        var lock = new Object() {\n        };\n\n        locks.offerLast(new LockEntry<T>(condition, lock));\n\n        synchronized (lock) {\n            try {\n                lock.wait(timeout);\n            } catch (InterruptedException e) {\n                throw new RuntimeException("InterruptedExeption", e);\n            }\n        }\n    }\n\n    public void wakeWith(T value) {\n        Iterator<LockEntry<T>> it = locks.iterator();\n        while (it.hasNext()) {\n            var entry = it.next();\n\n            if (entry.condition.test(value)) {\n                synchronized (entry.lock){\n                    entry.lock.notify();\n                }\n                it.remove();\n            }\n        }\n    }\n}\n\n')),(0,r.kt)("p",null,"First off we are using new records (Java 16) to have Predicate-lock mapping. We put it in\nthe list. The condition has some closure variables that it checks. It can be as simple\nas checking the id or as complex as waking only prime ids (for ex.)."),(0,r.kt)("p",null,"The other thread uses ",(0,r.kt)("b",null,"wakeWith(T value)")," feed the predicate evaluation. It iterates\nthe mentioned list and if predicate==true then notifies the thread and removes the entry."),(0,r.kt)("h3",null,"Quick test"),(0,r.kt)("p",null,"Let's see if it works. To test medium complexity use case, lets spawn 4 threads and\nwake only the half with the same modulo number (odd-even)."),(0,r.kt)("pre",{className:"mt-8"},(0,r.kt)("code",{className:"language-java"},"\npublic class SynchronizerTest {\n\n    @Test\n    void test_only_even_numbers_pass() throws InterruptedException {\n        int[] arr = new int[]{-1, -1, -1, -1};\n        var synchronizer = new Synchronizer<Integer>();\n\n        for(int i=0;i<4;i++){\n            var k = i;\n            new Thread(() -> {\n                synchronizer.waitOnCondition((Integer j) -> j % 2 == k % 2, 10_000);\n                arr[k] = k;\n            }).start();\n        }\n\n        Thread.sleep(400);\n\n        synchronizer.wakeWith(1);\n\n        Assertions.assertArrayEquals(new int[]{-1, 1, -1, 3}, arr);\n    }\n}\n\n")),(0,r.kt)("p",null,"We wake with 1 so only odd threads are woken up."),(0,r.kt)("h3",null,"Conclusion"),(0,r.kt)("p",null,"This was pretty cool! Need is mother of inventions. And I haven't seen any code as\nthis one yet. I must say I like the versatality of this little tool. "),(0,r.kt)("p",null,"Thanks for reading."),(0,r.kt)("br",null),(0,r.kt)("br",null))}c.isMDXComponent=!0},9008:function(e,t,n){e.exports=n(5443)}},function(e){e.O(0,[774,888,179],(function(){return t=8135,e(e.s=t);var t}));var t=e.O();_N_E=t}]);