(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[646],{3905:function(e,t,n){"use strict";n.d(t,{kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),f=u(n),m=o,p=f["".concat(i,".").concat(m)]||f[m]||c[m]||a;return n?r.createElement(p,s(s({ref:t},h),{},{components:n})):r.createElement(p,s({ref:t},h))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"===typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"===typeof e?e:o,s[1]=l;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5845:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/sudoku",function(){return n(1315)}])},1315:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return i}});n(7294);var r=n(3905),o=n(9008);function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s={},l=function(e){var t=e.children;return(0,r.kt)("main",{className:"md:w-3/5 text-lg mr-auto ml-auto mt-20 pb-20 article"},t)};function i(e){var t=e.components,n=a(e,["components"]);return(0,r.kt)(l,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.default,{mdxType:"Head"},(0,r.kt)("script",{defer:!0},"hljs.highlightAll();"),(0,r.kt)("title",null,"How to solve Sudoku efficiently"),(0,r.kt)("meta",{name:"Description",content:"How to solve Sudoku efficiently"})),(0,r.kt)("h1",null,"How to solve Sudoku efficiently"),(0,r.kt)("p",null,"I remember some 15 years ago fashion took over solving Sudoku puzzles, which you could\nfind in every shop. The game is about filling a 9 x 9 table with numbers from 1 to 9 so that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"each of 9 3 x 3 subsquares has all 1 through 9 numbers "),(0,r.kt)("li",{parentName:"ul"},"each row has all 1 through 9 numbers "),(0,r.kt)("li",{parentName:"ul"},"likewise for each column")),(0,r.kt)("figure",{className:"mt-10"},(0,r.kt)("img",{className:"mx-auto",src:"/sudoku.png",width:"60%",height:"60%"})),(0,r.kt)("p",null,"The table is partially filled so you have to find the rest of the numbers. Yesterday I was thinking\nwhat would be generic solution and I think I found one which I will share here."),(0,r.kt)("h3",null,"Filling in empty table"),(0,r.kt)("p",null,"Let's discuss how we would fill up the whole table if there were no numbers in it yet. We would start from\nfor the first subsquare and fill it with the numbers 1 to 9 rowwise. Now how would we fill up the rest of\nthe subsquares? "),(0,r.kt)("b",null,"Observation 1"),": We have contraint for each 3x3 square contains all the numbers so we can't remove the elements from the first square and add new ones. Each new 3x3 square is a duplicate with the number positions ",(0,r.kt)("b",null,"shifted")," somehow.",(0,r.kt)("p",null,'So now let\'s fill the first "row" of the subsquares. We shift the rows by one position down so that the row 3 becomes one,\nrow 2 - 3 and row 2 - 1. This way the numbers are offset and whole rows gets filled with 1 to 9.'),(0,r.kt)("figure",{className:"mt-10"},(0,r.kt)("img",{className:"mx-auto",src:"/rotations1.png",width:"60%",height:"60%"})),(0,r.kt)("p",null,"The same we do for first column of subsquares but now we are shifting the columns inside the subsquare:"),(0,r.kt)("figure",{className:"mt-10"},(0,r.kt)("img",{className:"mx-auto",src:"/rotations2.png",width:"60%",height:"60%"})),(0,r.kt)("p",null,"The tricky part is how do we fill the square (2,2)."),(0,r.kt)("b",null,"Observation 2"),": X rotations and Y rotations are ",(0,r.kt)("b",null,"orthogonal")," which means that the X rotations don't break the rules on Y and Y rotations don't break the rules on X. So we can do them independently and sum the result.",(0,r.kt)("p",null,"So we mix X rotation and Y rotation like so:"),(0,r.kt)("figure",{className:"mt-10"},(0,r.kt)("img",{className:"mx-auto",src:"/rotations3.png",width:"60%",height:"60%"})),(0,r.kt)("p",null,'In fact our "master" matrix should look like so:'),(0,r.kt)("figure",{className:"mt-10"},(0,r.kt)("img",{className:"mx-auto",src:"/rotations4.png",width:"60%",height:"60%"})),(0,r.kt)("p",null,"Let's check this is correct:"),(0,r.kt)("figure",{className:"mt-10"},(0,r.kt)("img",{className:"mx-auto",src:"/rotations5.png",width:"60%",height:"60%"})),(0,r.kt)("h3",null,"How to solve partially filled Sudoku"),(0,r.kt)("p",null,"So instead mix and match numbers in whole table, let's concentrate on guessing what rotations\nhave been applied and fill up the first subsquare. Each time we find number in other subsquare\nwe would guess the rotation, check it's consistent with other subsquares and fill in the first\nsubsquare. Once the first subsquare is fully filled we can just apply the transformations to\nthe rest of the table."),(0,r.kt)("h3",null,"Conclusion"),(0,r.kt)("p",null,"That was it."),(0,r.kt)("p",null,"Thanks for reading."),(0,r.kt)("br",null),(0,r.kt)("br",null))}i.isMDXComponent=!0},9008:function(e,t,n){e.exports=n(5443)}},function(e){e.O(0,[774,888,179],(function(){return t=5845,e(e.s=t);var t}));var t=e.O();_N_E=t}]);