<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-site.example.com/blog</id>
    <title>DG Blog</title>
    <updated>2025-03-03T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-site.example.com/blog"/>
    <subtitle>DG Blog</subtitle>
    <icon>https://your-docusaurus-site.example.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Wring simple parser with Megaparsec in Haskell]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2025/03/3/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2025/03/3/"/>
        <updated>2025-03-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[There goes around opinion that pure functional languages are rock solid and well suited for critical systems.]]></summary>
        <content type="html"><![CDATA[<p>There goes around opinion that pure functional languages are rock solid and well suited for critical systems.
For example Facebook uses it in anti-spam filters, serval financial companies for derivative modelling
and there is also some documented usage in compilers.</p>
<p>I tiptoed in Haskell long time ago, but didn't really get it. This time, my particular usecase was that I wanted to have parser for
toy language with minimal effort. Parser combinators like Parsec or Megaparsec are known for purely declarative approach
to modelling grammars.</p>
<p>After 2 weeks of playing with the language I must say that there is something strangely addictive in writing pure functional
code. Reading it is hard, writing it even harder, but when it starts to work there is a lot of satisfaction. I don't know
maybe I wasn't feeling confident about it before, but I finally started to like it.</p>
<p>In this short writing we are going to write simple application that reads in json, validates it and then pretty prints to
the console. I used Megaparsec because its newer and has better error messages, but 99% could be written in parsec as well.
On the fly I will showcase some Haskell idioms I learned on the way.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="normal-workflow">Normal workflow<a href="https://your-docusaurus-site.example.com/blog/2025/03/3/#normal-workflow" class="hash-link" aria-label="Direct link to Normal workflow" title="Direct link to Normal workflow">​</a></h2>
<p>In haskell every function is a pure function, which means it's idepotent. Side effects like IO are nicely contained in scope in
monads. What you get is that because there is no mutable state all the work is really composition of functions. It's a little bit
intellectually demanding, but once you wrote it right, it's hard to see it failing.</p>
<p>Most of the testing happens in REPL. Once you set up Stack or Cabal project you write functions in library module and the load it in REPL and
test the functions.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">stack ghci</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>From there you can use various tools but most helpful is probably checking types of the functions.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; import Data.List</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; :t concat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">concat :: Foldable t =&gt; t [a] -&gt; [a]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then you can test the function directly in REPL</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; concat ["Hello", " ", "World"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"Hello World"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are 2 things at play here in this example:</p>
<ul>
<li>haskell has parameteric polymorphism, which means you can have some abstract type a (like generics)</li>
<li>string is actually list of char [Char]</li>
</ul>
<p>If you are stubborn you can of course write tests in HUnit, but since you can test it in REPL I don't think
anyone writes them. But several libraries exist like HUnit.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="representing-data">Representing data<a href="https://your-docusaurus-site.example.com/blog/2025/03/3/#representing-data" class="hash-link" aria-label="Direct link to Representing data" title="Direct link to Representing data">​</a></h2>
<p>Haskell has no oop concepts so everthing is represented as Algebraic Data Types (or Generalized Algebraic Data Types for more power).
ADTs have two flavors:</p>
<ul>
<li>Sum types A or B</li>
<li>Product types tuples (A, B)</li>
</ul>
<p>This is how I represented internal JSON structure</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">data VNumber = VInt Integer |  VDouble Double</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    deriving (Show, Eq)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data VJson =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    VNumber VNumber</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | VString String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | VBool Bool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | VNull</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | VArray [VJson]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | VObject [(String, VJson)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    deriving (Show, Eq)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>VJSON is sum type of couple of variants. It think it's self explanatory, except the deriving part. Since we are building on
top of built in types like Integer, Double and String, typeclass Show (printing to console) and Eq can be autogenerated. Typeclasses
for now are like constraints on wildcard generic types the expose some behaviour.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="parser">Parser<a href="https://your-docusaurus-site.example.com/blog/2025/03/3/#parser" class="hash-link" aria-label="Direct link to Parser" title="Direct link to Parser">​</a></h2>
<p>All parsing happens inside monad Parsec.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Parsec e s a </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>where
e - custom exception,</p>
<p>s - stream type, can be String, Text, or ByteString,</p>
<p>a returned structure.</p>
<p>so for this simple parser I created type alias</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">type Parser = Parsec Void String</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You may notice the last type on the rhs is not defined so it "floats" to the definition on the left.</p>
<p>The flow is that you compose the smaller parsers into bigger parsers up to the top and the run topmmost one
with function parse</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; :t parse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">parse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  :: Parsec e s a -&gt; String -&gt; s -&gt; Either (ParseErrorBundle s e) a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So it takes our parser, debugging message, text to parse and returns either Left error or Right result.</p>
<p>For now let's see how the main function looks like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">run :: IO ()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">run  = do </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    args &lt;- getArgs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    case args of </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        [filePath] -&gt; do </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            content &lt;- readFile filePath</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let parseResult = parse value "" content </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case parseResult of </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Left err -&gt; putStr $ errorBundlePretty err </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Right v -&gt; putStr $ prettyJson v 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        _ -&gt; putStr "Usage: program &lt;filepath&gt; \n"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Pattern matching is easy to guess but for people unfamiliar with monads I will draw an analogy
for do notation in Java. So you have a method to that for each element returns a stream</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stream&lt;Integer&gt; foo(Integer i) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return Stream.of(i, i+1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And then you have a stream of 2 elements.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stream nums = Stream.of(1,3)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And finally you may recall that there is a method flatMap, so combining everthing together</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stream.of(1,3).flatMap(this::foo) // == Stream.of(1,2,3,4)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So this is much like working with monads. The foo method works on extracted value from the previous monad
and returns back new monad. This particular monad has intrisinc behavior so it flattens the nested streams
but the behavior itself could be anyting you want it to be. You can chain multiple foos
and in the end you will get back monad.</p>
<p>So do notation is much alike that it allows to chain previous monadic function to the next.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="parser-rules">Parser rules<a href="https://your-docusaurus-site.example.com/blog/2025/03/3/#parser-rules" class="hash-link" aria-label="Direct link to Parser rules" title="Direct link to Parser rules">​</a></h2>
<p>Let's start by parsing trivial cases of true, false and null.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">literal :: Parser VJson</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">literal = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lit &lt;- choice [C.string "true", C.string "false", C.string "null"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         &lt;?&gt; "only 'true', 'false' and 'null' literals are valid"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- notFollowedBy C.alphaNumChar &lt;?&gt; "only 'true', 'false' and 'null' literals are valid"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if lit == "true" then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return $ VBool True</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else if lit == "false" then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return $ VBool False</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return VNull</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>From the first parts:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">C.string "true"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>returns a parser that takes up "true" from the input or fails if not met.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">choice [string "a", string "b"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>returns composite parser that if string "a" fails then follows to the next parser up to exhaustion.</p>
<p>Then we save result in variable.</p>
<p><code>&lt;?&gt;</code>  allows for customizing failure message if the whole rule fails. It's like returning parser monad that always
fails with this message.</p>
<p>Finally we make sure that literals have no trailers which allows us to fail exactly in this place not in some time later.</p>
<p>One of the monad methods is return which just wraps a value in the monad</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">return $ VBool False</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>$</code> means evaluate what is on the right side and apply it to left side. It's needed here because evaluation happens from left to right.</p>
<p>Next</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">stringLiteral :: Parser VJson</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stringLiteral = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char '"'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    content &lt;- many (chunk "\\\"" &lt;|&gt; (:[]) &lt;$&gt; anySingleBut '"')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char '"'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $ VString (concat content)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>First match '"' single character then take zero or more parts that</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">chunk "\\\"" &lt;|&gt; (:[]) &lt;$&gt; anySingleBut '"'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Matches 2 chars \ and " if that fails try parsing any char that is not ".</p>
<p>One word of explanation for <code>&lt;$&gt;</code>. This operator takes a function (conversion to list or appending empty list afterwards)
and applies it inside the monad resulting in new monad with the result from function.</p>
<p>The most hard is parsing number</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">zero :: Parser String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zero = C.string "0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">digitFromOne :: Parser Char</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">digitFromOne = oneOf ['1'..'9']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wholePart :: Parser String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wholePart = choice [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    zero,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     ((++) . (: []) &lt;$&gt; digitFromOne) &lt;*&gt; many C.digitChar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fractPart :: Parser String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fractPart  = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dot &lt;- C.char '.'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fract &lt;- some C.digitChar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $ dot : fract</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">expPart  :: Parser String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">expPart = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    e &lt;- oneOf ['E', 'e']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sign &lt;- option "" ((:[]) &lt;$&gt; oneOf ['+', '-'])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    num &lt;- some C.digitChar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $ e : (sign ++ num)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">number :: Parser VJson</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">number = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sign &lt;- option "" ((:[]) &lt;$&gt; oneOf ['+', '-'])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wh &lt;- wholePart &lt;?&gt; "whole part of number"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fract &lt;- option "" fractPart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    e &lt;- option "" expPart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if null fract  &amp;&amp; null e then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return $ VNumber (VInt $ read (sign ++ wh))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return $ VNumber (VDouble $ read (sign ++ wh ++ fract ++ e))</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Explanations:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">((++) . (: []) &lt;$&gt; digitFromOne) &lt;*&gt; many C.digitChar]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>First convert char to String (with single char) inside monad. Then take this result and concat it with string
parsed by <code>many</code>.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; :t option</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">option :: GHC.Base.Alternative m =&gt; a -&gt; m a -&gt; m a</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So option takes a default value, and a monad return new monad with possibly default applied.</p>
<p>So for example what this does</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">e &lt;- option "" expPart</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>is that if <code>expPart</code> matches it returns string otherwise empty string "" is assigned.</p>
<p>Then array value</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">array :: Parser VJson</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">array = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char '['</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    arr &lt;- value `sepBy` C.char ','</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char ']'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $ VArray arr</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And object</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">keyValuePair :: Parser (String, VJson)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">keyValuePair = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C.space</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    VString key &lt;- stringLiteral</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C.space</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char ':'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    v &lt;- value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return (key, v)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">object :: Parser VJson</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">object = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char '{'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    kvs &lt;- keyValuePair `sepBy` C.char ','</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    _ &lt;- C.char '}'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $ VObject kvs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now that we have all the rules it is time to combine them</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">value :: Parser VJson</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">value = do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C.space</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    v &lt;- try literal &lt;|&gt; try stringLiteral &lt;|&gt; try number &lt;|&gt; try array &lt;|&gt; object</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C.space</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return v</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>try</code> tries parsing rule without consuming the input, note the last alternative is without try
to guarantee progress. It is a nice trick to consume spaces before and after proper value.</p>
<p>Megaparsec include test method parseTest. Let's try it:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; parseTest value "{\"a\" : 1, \"b\" : [1.0, 2.0]}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VObject [("a",VNumber (VInt 1)),("b",VArray [VNumber (VDouble 1.0),VNumber (VDouble 2.0)])]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="printing">Printing<a href="https://your-docusaurus-site.example.com/blog/2025/03/3/#printing" class="hash-link" aria-label="Direct link to Printing" title="Direct link to Printing">​</a></h2>
<p>Some branches are easy but some are complicated:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson :: VJson -&gt; Int -&gt; String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson VNull _ = "null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VBool True) _ = "true"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VBool False) _ = "false"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VNumber (VInt i)) _ = show i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VString s) _ = "\"" ++ s ++ "\""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VNumber (VDouble d)) _ = show d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VArray arr) ind = "[" ++ printElems arr (ind+2) ++ "\n" ++ indent ind "]\n"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        printElems (a:as) i = foldl </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (\acc x -&gt; acc ++ ",\n" ++ indent i "" ++ prettyJson x i) ("\n" ++ indent i "" ++ prettyJson a i) as</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        printElems [] _ = ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        indent i s = replicate i ' ' ++ s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VObject arr) ind = "{" ++ printElems arr (ind+2) ++ "\n" ++ indent ind "}\n"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        printElems ((k, v):as) i = foldl </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (\acc (k2, v2) -&gt; acc ++ ",\n" ++ indent i "" ++ "\"" ++ k2 ++ "\" : " ++ prettyJson v2 i) </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ("\n" ++ indent i "" ++ "\"" ++ k ++ "\" : " ++ prettyJson v i) </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            as</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        printElems [] _ = ""</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's only concentrate on VArray branch</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">prettyJson (VArray arr) ind = "[" ++ printElems arr (ind+2) ++ "\n" ++ indent ind "]\n"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    where </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        printElems (a:as) i = foldl </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (\acc x -&gt; acc ++ ",\n" ++ indent i "" ++ prettyJson x i) ("\n" ++ indent i "" ++ prettyJson a i) as</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        printElems [] _ = ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        indent i s = replicate i ' ' ++ s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>printElems</code> is a helper method that prints elements each in new and indented line. The whole trick was that to not include
"," after last expression. So this is how i did it. First match a list with first element and the rest. Then use <code>foldl</code> to reduce
array of json values to one string. The starting value is the matched first element <code>a</code> and it's different. Then reduction function takes
accumulator and appends next element with "," prepended. And for empty array just return empty string. <code>indent</code> is a helper method that prefixes
the give string with number of spaces.</p>
<p>Let's test:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; putStr $ prettyJson ( VArray [(VNumber (VInt 1)), (VNumber (VInt 2))]) 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ghci&gt; </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2025/03/3/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>That's it  for this simple tutorial. Here is a list of nice readings</p>
<ul>
<li><a href="https://markkarpov.com/tutorial/megaparsec.html#notfollowedby-and-lookahead" target="_blank" rel="noopener noreferrer">Megaparsec intermediate tutorial</a></li>
<li><a href="https://smunix.github.io/dev.stephendiehl.com/hask/index.html" target="_blank" rel="noopener noreferrer">What I whish I knew learning Haskell</a></li>
<li><a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/reading-list" target="_blank" rel="noopener noreferrer">GHC reading list | advanced </a></li>
<li><a href="https://smunix.github.io/dev.stephendiehl.com/fun/index.html" target="_blank" rel="noopener noreferrer">Write you a haskell</a></li>
</ul>
<p>I had a lot of fun and eager for new challenges. If I have some spare time maybe I will write how to write System F typechecker
in Haskell.</p>
<p>Thanks for now.</p>
<p>PS Here is the <a href="https://github.com/vulture-dominiczek/haskell-json-parser" target="_blank" rel="noopener noreferrer">code</a>.</p>]]></content>
        <category label="haskell" term="haskell"/>
        <category label="parsing" term="parsing"/>
        <category label="programming" term="programming"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing concurrency solver]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2025/01/18/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2025/01/18/"/>
        <updated>2025-01-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Lately at work most of the staff is puzzled with mysterious bug. In short there is a statemachine that]]></summary>
        <content type="html"><![CDATA[<p>Lately at work most of the staff is puzzled with mysterious bug. In short there is a statemachine that
processes movements in batches. But sometimes one particular movement is duplicated and nobody knows why...</p>
<p>I wish I could brag I solved it myself, but that is not the case. But it inspired me to dig a little bit in
theory how distributed systems/concurrency is reasoned about and visualized.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="time-space-diagrams">Time space diagrams<a href="https://your-docusaurus-site.example.com/blog/2025/01/18/#time-space-diagrams" class="hash-link" aria-label="Direct link to Time space diagrams" title="Direct link to Time space diagrams">​</a></h2>
<p>I have read about them in some book long ago and was looking for some time find the correct name. It's pretty niche
concept, but in my opinon unjustly. They are so good to visualize not only distributed systems but also concurrency.</p>
<p>Let me show you.</p>
<p><img decoding="async" loading="lazy" src="https://your-docusaurus-site.example.com/assets/images/synchronization-dbc9b26836047fe459e817fc7eff85b0.png" width="1229" height="432" class="img_ev3q"></p>
<p>This is the basic case of dirty read, var a is not lock and therefore instead of being increamented it is wrote twice
with same value 2. The example is pretty silly but you can imagine more complex scenarios where the drawing would come in handy.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="terminology">Terminology<a href="https://your-docusaurus-site.example.com/blog/2025/01/18/#terminology" class="hash-link" aria-label="Direct link to Terminology" title="Direct link to Terminology">​</a></h3>
<p>So you can imagine that the horizontal lines and crossing arrows enforce partial ordering of the events. In cases of multithreading there is no
more to add but in case of distributed systems time flies different on each of the actors line.</p>
<p><strong>The cut</strong> is any line cutting the diagram in half so that the partial ordering of the events is preseved. You can think of it as a snapshot or
an instant in systems run. And it has associated with it a <strong>global state</strong> that corresponds to any variables on any actor alltogether.</p>
<p><strong>The run</strong> is a particular combination of actions runs <strong>while preserving the partial order</strong>. So you remember that one thread can be faster in one
go and in other go it can be faster than the others for instance.</p>
<p>If we had two threads and their actions lined up next to each other, then at each increment we would have 3 options:</p>
<ul>
<li>thread 1 executes, thread 2 waits</li>
<li>thread 1 waits, thread 2 executes</li>
<li>both execute</li>
</ul>
<p>So all possible runs would be 3^n with n pairs of actions. This is <strong>the lattice</strong> and from it we can generate all valid runs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-octopus">Introducing Octopus<a href="https://your-docusaurus-site.example.com/blog/2025/01/18/#introducing-octopus" class="hash-link" aria-label="Direct link to Introducing Octopus" title="Direct link to Introducing Octopus">​</a></h3>
<p>So I thought - instead of instrumenting java code and what not, why not write little modelling tool in python. And reason about the correct concurrency
patters by enummerating all of the runs.</p>
<p>The tool that I wrote has one shared dictionary and multiple threads "processes". Processes interact with the shared state by several primitives:</p>
<ul>
<li>read at path</li>
<li>write at path</li>
<li>compute next local state on old local state</li>
<li>lock at path</li>
<li>unlock at path</li>
<li>noop (for testing purposes)</li>
</ul>
<p>It turns out that locking,writing and reading on XPath is really powerful and I think you can model with it any concurrency problem I know - for example
Dining Philosophers.</p>
<p>So <a href="https://github.com/vulture-dominiczek/octopus" target="_blank" rel="noopener noreferrer">here</a> it is.</p>
<p>To tease it up a little bit modelling looks like this:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">abspath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dirname</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__file__</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'..'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> core </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> DataTransfer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> api </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Octo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> config </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> PrintOpts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># PrintOpts.PRINT_LOCALS = False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Octo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init_shared_state</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Octo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Alice'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p2  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Octo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Bob'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">incA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">locals</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">locals</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">DataTransfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">compute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">incA</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> description</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'Increment a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">DataTransfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">DataTransfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">compute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">incA</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> description</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'Increment a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">DataTransfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to_path</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Octo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">solve_lattice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">output</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'output.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> validity_check</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">'a'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>About aforementioned problem here is solver output <a href="https://your-docusaurus-site.example.com/assets/files/out1-f35b5df04c897ebe8aba7052231e4b69.txt" target="_blank">without locks</a>.</p>
<p>And here is with <a href="https://your-docusaurus-site.example.com/assets/files/out2-fbe203ee6c2e1365852619c5f420b65a.txt" target="_blank">locks</a>.</p>
<p>I wish I also add messaging to the tool if I have more time in the future.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2025/01/18/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Time flies when you are having fun. If I had to reason about concurrency issues I would use such tool I just created to ennumerate all the runs
and print out where the issue is.</p>
<p>Thanks</p>]]></content>
        <category label="microservices" term="microservices"/>
        <category label="distributed" term="distributed"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[My exploration of WASM/WASI]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2025/01/10/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2025/01/10/"/>
        <updated>2025-01-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Assembler was developed in 1947, wow! It makes 78 years of computing development in which we saw higher level programming languages, virtual machine programming languages (write once run everywhere), virtual machines, cloud and so on. A lot of knowledge got accumulated over the time which you can see in size of artifacts deployed to cloud.]]></summary>
        <content type="html"><![CDATA[<p>Assembler was developed in 1947, wow! It makes 78 years of computing development in which we saw higher level programming languages, virtual machine programming languages (write once run everywhere), virtual machines, cloud and so on. A lot of knowledge got accumulated over the time which you can see in size of artifacts deployed to cloud.</p>
<p>Over the years we have seen several attempts reach for the roots. Similarly <strong>WebAssembly</strong> is instruction format for virtual machine designed to be portable compilation target for any language willing. It is fast as nearly native speed, secure and sandboxed and language agnostic. Originally wrote for the browsers it is beginning to get traction as microservice runtime, which btw is topic of this post.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="comparison-to-jvm">Comparison to JVM<a href="https://your-docusaurus-site.example.com/blog/2025/01/10/#comparison-to-jvm" class="hash-link" aria-label="Direct link to Comparison to JVM" title="Direct link to Comparison to JVM">​</a></h2>
<p>It is obvious that WASM and JVM share similarities as intermediate-represented runtimes. If you have interpreted language then out of necessity you have to have some mechanism to speed things up. For Java
there is tiered JIT compiler and Wasm also has JIT however there is also possiblity of Ahead of Time Compilation.</p>
<p>Wasm was designed for <em>security, portability, and fast startup</em> and differs in several things from Java.
First of all WASM modules are compact binaries and smaller size means faster loading. Second all the dependencies are pre-bundled and not needed to be loaded dynamically which takes time. And the binary code is already sandboxed which means it does not need to be validated.</p>
<p>But what is most interesting is that WASM bytecode is closer to native binaries than JVM bytecode which means it can be JITed with less effort. Here is why:</p>
<ul>
<li>linear memory model similar to C-style pointers</li>
<li>no GC</li>
<li>basic numeric types</li>
<li>assembly like control flow (loops, branches, direct-calls) versus method invocations</li>
</ul>
<p>It looks like history took whole circle.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-bother">Why bother<a href="https://your-docusaurus-site.example.com/blog/2025/01/10/#why-bother" class="hash-link" aria-label="Direct link to Why bother" title="Direct link to Why bother">​</a></h2>
<p>Where Wasm will shine in near future is serverless computing, which is now more or less poinless. Imagine deploying 100MB artifact which will spin up in 5 seconds for only ONE function. But with Wasm and it's promises to start withing 20ms the task takes whole new dimension.</p>
<p>And of course cloud is money. And where is money (cost savings) there imo will always be political will to move things forward. I'm pretty sure WebAssembly has bright future, at least for the cloud and edge.</p>
<p>A month ago I watched <a href="https://www.youtube.com/watch?v=fQdkNGZqYZA" target="_blank" rel="noopener noreferrer">this wasmCloud presentation</a> which was an interesting case for the Edge. Imagine that you run a factory with devices with computing constraints. If the gear is spinning 5000 RPMs you have to take corrective action right now, instead of waiting for server to respond. Wasm can be deployed on such machines (Edge) and take necessary actions of control loop while delegating higher level business functions to cloud.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sandboxing-and-formal-verification">Sandboxing and Formal Verification<a href="https://your-docusaurus-site.example.com/blog/2025/01/10/#sandboxing-and-formal-verification" class="hash-link" aria-label="Direct link to Sandboxing and Formal Verification" title="Direct link to Sandboxing and Formal Verification">​</a></h3>
<p>If computer programs were computationally proven to be correct (formal verification) then there would be no bugs at all. Sandboxing is one step close towards this goal. If you enforce clear boundaries of the system,
which files are used, what is sent on network and so on the security is much easier to reason about without "gaps". And once you have perfectly isolated component without gaps you can use formal tools to actually prove the logic is correct. I found <a href="https://oa.upm.es/75802/1/TFM_DAVID_MUNUERA_MAZARRO.pdf" target="_blank" rel="noopener noreferrer">something here</a> will take a look in near future.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="webassembly-component-model">WebAssembly Component Model<a href="https://your-docusaurus-site.example.com/blog/2025/01/10/#webassembly-component-model" class="hash-link" aria-label="Direct link to WebAssembly Component Model" title="Direct link to WebAssembly Component Model">​</a></h3>
<p>So far the application have been run in one-off basis, but standards are emerging which will handle component interactions (microservices). Here is a <a href="https://component-model.bytecodealliance.org/" target="_blank" rel="noopener noreferrer">summary</a>.</p>
<table><thead><tr><th>Word</th><th>Definition</th></tr></thead><tbody><tr><td>component</td><td>a specially wrapped wasm binary that can interact with other components on clear interfaces</td></tr><tr><td>interface</td><td>a contract between components that is language agnostic</td></tr><tr><td>WIT</td><td>interface defnition langauge that you port with componentized applications</td></tr><tr><td>world</td><td>contract between component and runtime</td></tr></tbody></table>
<p>So you basically write the functionality in Rust and <strong>export</strong> functions in Wit. Other component <strong>imports</strong> (also with WIT) these functions and the serialization/deserialization is handled by runtime. wasmCloud claims to also remotely call the imports which is handled with NATS. Why WIT you may ask? Because wasm primtives are just numbers and strings. For high level functionality you need <em>records</em>, <em>tuples</em>, <em>variants</em>, <em>lists</em> and so on.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="for-now-disapointing">For now disapointing<a href="https://your-docusaurus-site.example.com/blog/2025/01/10/#for-now-disapointing" class="hash-link" aria-label="Direct link to For now disapointing" title="Direct link to For now disapointing">​</a></h3>
<p>It looks all good but is still in it's nascency. This means you probably won't see library for your use (if you don't write yourself). However there are several runtimes that are under development:</p>
<ul>
<li>wasmCloud</li>
<li>fermyon/spin</li>
<li>wasmEdge</li>
<li>WAGI</li>
<li>and more</li>
</ul>
<p>Right now it is hard to host microservices application with WASI other than communicating via http.</p>
<p>I got carried away and wrote some <a href="https://github.com/vulture-dominiczek/fermyon-spin-eval" target="_blank" rel="noopener noreferrer">number factorization microservice app</a>. Check it out!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2025/01/10/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>It's worth following the developments, that's for sure. I'm pretty certain that the bright future is ahead for WASM.</p>]]></content>
        <category label="wasm" term="wasm"/>
        <category label="microservices" term="microservices"/>
        <category label="fermyonspin" term="fermyonspin"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Christmas with Quantum Mechanics]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2024/12/29/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2024/12/29/"/>
        <updated>2024-12-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Christmas is wonderful time, although not without challenges. Particular challenge for me is to keep mind fresh and not sleep all the time. I like the atmospehere of going to saint masses and eating good food (with couple of drinks) and stuff but as always I felt a little bit lazy.]]></summary>
        <content type="html"><![CDATA[<p>Christmas is wonderful time, although not without challenges. Particular challenge for me is to keep mind fresh and not sleep all the time. I like the atmospehere of going to saint masses and eating good food (with couple of drinks) and stuff but as always I felt a little bit lazy.</p>
<p>So to exercise my brain a little I found out <a href="https://learning.quantum.ibm.com/" target="_blank" rel="noopener noreferrer">this course in quantum computation</a>. It was great fun in short. I was constantly on the edge of my cognitive possiblities, but the material was made crystal clear. I developed a particular method to finish one module at the time in the afternoon and rehearse reading part during mornings. I had a little bit of crysis on first day of Christmas but managed to carry on half consciously.</p>
<p>And finally on the return home I passed the test with 75% score.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="foundations-are-key">Foundations are key<a href="https://your-docusaurus-site.example.com/blog/2024/12/29/#foundations-are-key" class="hash-link" aria-label="Direct link to Foundations are key" title="Direct link to Foundations are key">​</a></h2>
<p>I was surprised that the boring linear algebra stuff I studied on freshman year on univesity actually makes a big difference. In fact 3/5 of the material is just plain algebra. I was also shocked how much I remebered. I think that because quantum setting is relatively new people try to comprehend it by analogy to classical settings. There is a huge overlap between mathematical model of classical and quantum mechanics.</p>
<p>The quantum operations are basically multiplication of state vectors by operation matrices (with particular properties). There is also place for for Bayes Theorem when measuring the quantum state.</p>
<p>I liked the matrial for one particular reason: the intuition goes first. The math apparatus are just a means to succintly and without confusion describe simple concepts. The course showed a huge effort to develop mathematical feeling when describing classical and quantum state.</p>
<p>Each module builds on the previous so if you suck at one particular part, you won't be able to fully understand the next parts. The most difficult part for me was to imagine operations on matrices and state vectors. Also around the module 2-3 the atmosphere gets dense and you have to be in shape to ingest the material.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="humble-beginnings">Humble beginnings<a href="https://your-docusaurus-site.example.com/blog/2024/12/29/#humble-beginnings" class="hash-link" aria-label="Direct link to Humble beginnings" title="Direct link to Humble beginnings">​</a></h2>
<p>Recently Google unveiled their quantum chip Willow with 105 qbits. Well I don't even imagine somebody crossing the barrier of 1000 qubits. I mean the math is so advanced that for circuits with 2 qbits is hard to understand enough.</p>
<p>But I guess with time the same will happen as with classical chips. Somebody will develop apt abstractions on top of this advanced math so that programming will be possible on higher level. I wonder what that language will look like. Keyword entangle(a,b)? Possibly. Or maybe p_measure(pi, X, Y)? Anyways today state of art is just like classical chips 60 years ago.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="but-still-improvement">But still improvement<a href="https://your-docusaurus-site.example.com/blog/2024/12/29/#but-still-improvement" class="hash-link" aria-label="Direct link to But still improvement" title="Direct link to But still improvement">​</a></h2>
<p>Over the time of course I had a possiblity to learn what makes quantum computation special. It is this entanglement property that has several astonishing uses.</p>
<p>First the quantum teleportation. It's not like teleporting the matter as in television, but rather it is a protocol. So if you have 2 qbits in entangled state you can instantly (faster than light) switch on qbit and the second one sets different. But after that - poof the first qbit is gone as well as share e-bit. And here is the disappointing part - even if the information does really teleport, then you still have to send the classical bit by classical means (slower than speed of light) or you won't be able to read it.</p>
<p>Second there is superdense coding that allows to exchange one qbit with 2 classical bits of information, but on the condidtion that you have e-bit (entangled two qbits). And this operation uses e-bit without coming back.</p>
<p>And finally when you have entangled qbits you can beat upper limits for classical strategies for cooperative games like CHSH game. To have an entangled qbit is like having agreed on particular strategy between players without communication. Interesting...</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-much-to-discover">So much to discover...<a href="https://your-docusaurus-site.example.com/blog/2024/12/29/#so-much-to-discover" class="hash-link" aria-label="Direct link to So much to discover..." title="Direct link to So much to discover...">​</a></h2>
<p>There are more courses from IBM on quantum so maybe when I have time I will proceed with next modules. But for now a brief pause.</p>
<p>This is fascinating branch of science and who knows what will come next. From this time on I will follow the news more closely.</p>
<p>Thanks.</p>]]></content>
        <category label="systems" term="systems"/>
        <category label="math" term="math"/>
        <category label="quantum" term="quantum"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thoughts on observability]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2024/12/15/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2024/12/15/"/>
        <updated>2024-12-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Everything is complicated, even those things that seem flat in their bleakness.]]></summary>
        <content type="html"><![CDATA[<p><em>Everything is complicated, even those things that seem flat in their bleakness.</em></p>
<p>Debugging microservices application based on scarce information is one of those cases that I don't wish
anyone. But it is how it is at my current project, so management started to put some measures in motion.</p>
<p>I reaserched topic a bit at work and a bit on my own and I have something to share - <a href="https://opentelemetry.io/" target="_blank" rel="noopener noreferrer">OpenTelemetry is the future</a>. Bu it is still work in progress.</p>
<p>In this post I will tell you everything I learned.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="observability-intro">Observability intro<a href="https://your-docusaurus-site.example.com/blog/2024/12/15/#observability-intro" class="hash-link" aria-label="Direct link to Observability intro" title="Direct link to Observability intro">​</a></h2>
<p>When it comes to first (and most important) pillar of observability - logs, the first little revolution came with the invention of <strong>Mapped Diagnostic Context</strong>.  Neil Harrison described this method in the book <em>Patterns for Logging Diagnostic Messages in Pattern Languages of Program Design 3, edited by R. Martin, D. Riehle, and F. Buschmann (Addison-Wesley, 1997)</em>.</p>
<p>The beauty of the idea is it's simplicity. You put collection of key value pairs in thread local storage and
implicitly append them to logs each time the log message is created. As you know ids, names and other stuff can "span" multiple nested method calls and this really makes life a little bit easier. Beacause it 2025 all logging framework support it, but that's not all.</p>
<p>Taking it one step further you could propagate this key values across threads and (eventually) service boundaries. Welcome to distributed tracing. Spring Boot covers all this stuff semi-automatically all you have to do is to configure proper tools (Zipkin-Brave or OTEL).</p>
<p>And finally golden standard Prometheus scrapes at given metrics exported from your Spring app on given endpoint and acts as a store for Grafana to display.</p>
<p>These were the 3 components of Observability: Metrics, Logs and Traces.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-the-future-will-bring">What the future will bring<a href="https://your-docusaurus-site.example.com/blog/2024/12/15/#what-the-future-will-bring" class="hash-link" aria-label="Direct link to What the future will bring" title="Direct link to What the future will bring">​</a></h2>
<p>Not so long ago <strong>Open Telemetry</strong> emerged as a standard for application instrumentation with all 3 observability components. State of providers is quite good - 40+ languages covered more or less exporting to
various sinks like ELK stack, Grafana and Zipkin/Jaeger.</p>
<p>But to be honest I didn't find any easy to use out of the box tool to visualize these goods. Yes there is Grafana with extensions for Loki (logs) and tempo db (traces) but the documentation has holes and you can't just set everything in a day. Some Open Source dashboards exist to my knowledge but they are a little bit clunky to use and limited.</p>
<p>As usual complex stuff requires time and time is money. So I would look for the innovations in the commercial side of the topic. I even have my favourite <strong>Lighstep</strong> - now ServiceNow Cloud Observability is one such solution that can do it well. They market it as</p>
<ul>
<li>possible to go all between logs traces and metrics</li>
<li>use AI to diagnose problems (interesting)</li>
</ul>
<p>But I'm not an architect and not planning to put my own money on the table so this has stay in the land of dreams for now.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-i-done-poc">How I done POC<a href="https://your-docusaurus-site.example.com/blog/2024/12/15/#how-i-done-poc" class="hash-link" aria-label="Direct link to How I done POC" title="Direct link to How I done POC">​</a></h2>
<p>At work I tried to setup Spring to send traces to Zipkin as Proof of Concept and it costed me a little bit of effort. Because there are 2 bridges (adapters) and 2 exporters there is a little bit of problem - mix any of the 2 up and it will break. Oh how I wish it would just break with explicit error! Instead it just does not send logs and go figure why.</p>
<p>Luckily I started with OTEL first and when I switched I saw mixed jars so after exluding otel from parent pom i got finally traces to zipkin. The next step was to actually propagate the trace id across services boundaries. I discovered a cool feature - a <strong>baggage</strong>. It's a key-value pairs collection that propagetes with traceId/spanId. If you set some config property (like remote-fields or something) you get it sent to other service for free.</p>
<p>As long as you use Spring stack to send requests the MDC gets exported as SimpleTextMap sent in a header.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2024/12/15/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Future is integration of all three pillars of observability.</p>
<p>In time there eventually be a Open Source solution that enables you to switch between logs traces and metrics from single place and it will be to much of everyones joy.</p>
<p>But for now waiting is all we can do.</p>]]></content>
        <category label="systemdesign" term="systemdesign"/>
        <category label="cloud" term="cloud"/>
        <category label="kubernetes" term="kubernetes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reflections after writing simple Spring Boot library]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2024/11/5/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2024/11/5/"/>
        <updated>2024-11-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[*Sometimes learning from adversity is better than trying to avoid it.]]></summary>
        <content type="html"><![CDATA[<p><em>Sometimes learning from adversity is better than trying to avoid it.
Taking it into careful consideration provides valuable lessons that will support you in the future.</em></p>
<p>I appreciate my job for one particular thing. That is, it provides steady steam of difficult problems that challenge my intellect. Recently I tried to wrap my head around problem how to write tests for semi-large Spring Boot codebase and refactor it (with no tests whatsoever).</p>
<p>I started from the assumption that when you don't have any legacy tests at hand first you write them. How can you know you don't break functionality without running the tests? But the code was very unfriendly and writing them would require writing mocks.</p>
<p>So I thought - why not automate stuff a little bit:</p>
<ul>
<li>instrument given beans with reflection</li>
<li>dump args and results to json</li>
<li>load json directly in tests instead of writing mocks in plain Java</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem">The problem<a href="https://your-docusaurus-site.example.com/blog/2024/11/5/#the-problem" class="hash-link" aria-label="Direct link to The problem" title="Direct link to The problem">​</a></h2>
<p>Main problem is that there are absolutely no tests. All testing is done by business. What a terrible waste of time... Each time something changes they click their way through all over again.</p>
<p>So I thought I will take snapshot of current state of things and secure some tests in the backend. But there is some many API methods! And each has nested call to service and service calls repository.</p>
<p>I would write aspects no problem, but repositories are as you recall interfaces for which the classes are generated by Spring. And to add to that I want to move fast and writing the Advices takes time.</p>
<p>I have come up with instrumenting the selected beans, but those beans can autowire another instrumented beans. So some mechanism has to be devised to order the instrumentation to do it from the bottom-most to the top.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="approach">Approach<a href="https://your-docusaurus-site.example.com/blog/2024/11/5/#approach" class="hash-link" aria-label="Direct link to Approach" title="Direct link to Approach">​</a></h2>
<p>So I have both "special" interfaces of repositories and plain beans annotated as components. Then you have to cater for both of the cases. For the interfaces I generated JDK dynamic proxies. For classes (as it happens they don't implement any interface) I used ByteBuddy instrumentation library to subclass them and load them with default classloader.</p>
<p>And I have instrumented beans. Now I unload the old beans and switch them to proxes. For that I used BeanFactory which I took from the ApplicationContext with some class casting. But that is not all beacuse you still have to autowire all affected beans.</p>
<p>First iteration of autowiring was very wasteful and boiled down to realoading everything. Then I came to the conclusion to build the dependency graph and updated only the nodes of the graph in reverse order. Spring BeanFactory has both methods for finding bean dependencies and dependants so it was pretty easy. One catch is that you have to actually autowire not the bean itself but the subclassed proxy. After that everything worked as charm.</p>
<p>If you are interested you can download the lib here.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reflection">Reflection<a href="https://your-docusaurus-site.example.com/blog/2024/11/5/#reflection" class="hash-link" aria-label="Direct link to Reflection" title="Direct link to Reflection">​</a></h2>
<p>After writing the lib and being exposed to the project at work I have some thoughts.</p>
<p>First if you write Autoconfig lib to be used by other Spring components you absolutely can't poison the application context with unncessary stuff. If you you put bootstrap.yaml in your library it will float on forever and take predecence and collide with stuff already defined. Spring treats the same multiple bootstraps and in case of name collision the order is random. And if you specify it in config/- directory it will actually take predecence over anything else.</p>
<p>Moreover you should not define any components picked up by component scanning as these can clash with other things defined. Just confine everything inside the @AutoConfiguration annotated class with the exception of loading necessary stuff with @Import.</p>
<p>Likewise you should not include starters in your library because they will for sure accumulate for several libs. Just use specific non-umbrella deps even better include your own jars.</p>
<p>IF you have crosscutting concerns like authentication, you should not use internals outside the pointcuts. So for example you have authentication fetching the token before the feign call. Then using static class for caching the token and pulling it from the business logic is a big mistake.</p>
<p>Finally you should have mock database and the whole thing would not be needed. I would just happily write e2e tests then.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2024/11/5/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>What will be of my little library is yet to be defined. However I learned about some best practices for writing spring boot libs and learned some lessons not to repeat over again. You I am happily sharing it to you by this article.</p>]]></content>
        <category label="systemdesign" term="systemdesign"/>
        <category label="spring" term="spring"/>
        <category label="java" term="java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1BRC Challenge]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2024/10/29/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2024/10/29/"/>
        <updated>2024-10-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[One thing that recently got nerd the hell out of me was 1 billion row challenge. Citing the original site:]]></summary>
        <content type="html"><![CDATA[<p>One thing that recently got nerd the hell out of me was 1 billion row challenge. Citing the original site:</p>
<p><em>Your mission, should you decide to accept it, is deceptively simple: write a Java program for retrieving temperature measurement values from a text file and calculating the min, mean, and max temperature per weather station. There’s just one caveat: the file has 1,000,000,000 rows!</em></p>
<p>I was working on it after hourse and 1 week after taking on the challenge there are several conclusions worth writing about.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="baseline">Baseline<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#baseline" class="hash-link" aria-label="Direct link to Baseline" title="Direct link to Baseline">​</a></h2>
<p>To make dev loop faster I decided limit the task to 100 million rows.</p>
<p>The baseline from the autor was an idiomatic streams, but single threaded.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class CalculateAverage_baseline {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static final String FILE = "./measurements.txt";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static record Measurement(String station, double value) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private Measurement(String[] parts) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this(parts[0], Double.parseDouble(parts[1]));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static record ResultRow(double min, double mean, double max) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public String toString() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return round(min) + "/" + round(mean) + "/" + round(max);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private double round(double value) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return Math.round(value * 10.0) / 10.0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class MeasurementAggregator {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private double min = Double.POSITIVE_INFINITY;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private double max = Double.NEGATIVE_INFINITY;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private double sum;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private long count;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws IOException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Collector&lt;Measurement, MeasurementAggregator, ResultRow&gt; collector = Collector.of(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                MeasurementAggregator::new,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                (a, m) -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    a.min = Math.min(a.min, m.value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    a.max = Math.max(a.max, m.value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    a.sum += m.value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    a.count++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                (agg1, agg2) -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    var res = new MeasurementAggregator();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    res.min = Math.min(agg1.min, agg2.min);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    res.max = Math.max(agg1.max, agg2.max);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    res.sum = agg1.sum + agg2.sum;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    res.count = agg1.count + agg2.count;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    return res;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                agg -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    return new ResultRow(agg.min, (Math.round(agg.sum * 10.0) / 10.0) / agg.count, agg.max);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Map&lt;String, ResultRow&gt; measurements = new TreeMap&lt;&gt;(Files.lines(Paths.get(FILE))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .map(l -&gt; new Measurement(l.split(";")))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .collect(groupingBy(m -&gt; m.station(), collector)));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(measurements);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The performance is not good as expected:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">time ./calculate_average_baseline.sh </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m15,846s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m16,002s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0,769s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="parallelizing-the-code">Parallelizing the code<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#parallelizing-the-code" class="hash-link" aria-label="Direct link to Parallelizing the code" title="Direct link to Parallelizing the code">​</a></h2>
<p>My first thought was to parallelize the code and see how fast it will run. Obvious choice is to use streams the same way but add .parallel() call. So updates go to central HashMap and access has to be synchronized.</p>
<p>One way is to use locks, tried it and it was slow. Remembering we have 100 million rows locking on whole object is very wasteful. Much better would be to lock only on specific hashmap entry with given key.</p>
<p>What surprised me was that Atomic* primitives and spinlocks were actually slower than wait/notify. Luckly there is another way you can do same thing with ConcurrentHashMap. When calling compute method the run lambda will be synchronized.</p>
<p>So the code reads file on the fly and uses Spliterator to carve out overflow of work to another thread run on ForkJoinPool. Then each iteration of foreach does the update on ConcurrentHashMap.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class CalculateAverage_dg2 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static final String FILE = "./measurements.txt";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static class Measurement {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double min = Double.MAX_VALUE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double max = Double.MIN_VALUE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double sum = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double count = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public Measurement(double value) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.min = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.max = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.sum = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            this.count = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public String toString() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return round(min) + "/" + round(max) + "/" + round(sum / count);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ConcurrentHashMap&lt;String, Measurement&gt; measurements = new ConcurrentHashMap&lt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Files.lines(Path.of(FILE)).parallel().forEach(line -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int split = line.indexOf(";");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            String key = line.substring(0, split);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            double val = Double.parseDouble(line.substring(split + 1));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            measurements.compute(key, (k, _v) -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (_v == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    return new Measurement(val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                _v.min = Double.min(_v.min, val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                _v.max = Double.max(_v.max, val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                _v.sum += val;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                _v.count++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return _v;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var sorted = new TreeMap&lt;&gt;(measurements);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(sorted);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static double round(double value) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Math.round(value * 10.0) / 10.0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The results were good - on 4 core (8 threads) CPU it runs 4 times faster:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">time ./calculate_average_dg2.sh </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m4,992s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m33,384s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m1,207s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Spliterators performance is good because of data locality that it preserves. Processors have limited amount of L1/L2/L3 caches so if you don't keep the data close to computation then this translates to cache missess. So best way is to perform operations "semi-sequentially" just like the spliterators.</p>
<p>But... Streams create threads dynamically and this means you can't partition the data into well known parts. So the access has to be synchronized in one place and this one big problem here.</p>
<p>It would be the end of the story if I didn't check the leaderboard on competitions github repo. There were speedups as fast as astonishing 32x times faster. So there is much to analyse. Below are the most important optimizations I tried in my playground.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="optimizations">Optimizations<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#optimizations" class="hash-link" aria-label="Direct link to Optimizations" title="Direct link to Optimizations">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="o1-reading-longs-instead-of-bytes">O1. Reading longs instead of bytes<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#o1-reading-longs-instead-of-bytes" class="hash-link" aria-label="Direct link to O1. Reading longs instead of bytes" title="Direct link to O1. Reading longs instead of bytes">​</a></h3>
<p>You may recall that everything is represented in JVM as an int. This means that even a byte is in fact and 4-byte int. I'm not sure if JVM doesn't do some kind of compression of byte[] array. If not that would mean the data is actually 4x times larager. So it is wasteful to search newline byte by byte. The trick is to load 8 bytes at once and find newline in whole batch.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> long word = buffer.getLong();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">long match = word ^ 0x0a0a0a0a0a0a0a0aL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">long line = (match - 0x0101010101010101L) &amp; (~match &amp; 0x8080808080808080L);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (line == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i += 8;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    continue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">next = i + (Long.numberOfTrailingZeros(line) &gt;&gt;&gt; 3) + 1;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Xor will zero the byte that has newline (0x0a). Then we cause underflow which sets leading bit to 1. And then we zero out everthing else. From the leading bit we can get offset of newline in 8-byte pack.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="o2-represent-measurements-as-int--skip-parsing">O2. Represent measurements as int / skip parsing<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#o2-represent-measurements-as-int--skip-parsing" class="hash-link" aria-label="Direct link to O2. Represent measurements as int / skip parsing" title="Direct link to O2. Represent measurements as int / skip parsing">​</a></h3>
<p>We can take advantage of the data format: floats have only one decimal point and temperatures are not greater or lesser than 100 points for sure. So the idea is to parse the number manually and multiply it by 10 so that it is the integer.</p>
<p>This is not huge improvement but still. Actually big improvement is skipping Double.parseDouble as we can discard uncessary complexity like long mantissa and exponent part.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="o3-defer-creating-of-string">O3. Defer creating of String<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#o3-defer-creating-of-string" class="hash-link" aria-label="Direct link to O3. Defer creating of String" title="Direct link to O3. Defer creating of String">​</a></h3>
<p>Strings are a little bit heavy because they are not underlied by byte[] but char[]. So each time we create a string we encode it and according to the charset. We can defer creating strings until they are needed for printing. But we have to find some other key for the hashmap.</p>
<p>Copying byte array is much faster and this is what I used.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="o4-faster-hashes">O4. Faster hashes<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#o4-faster-hashes" class="hash-link" aria-label="Direct link to O4. Faster hashes" title="Direct link to O4. Faster hashes">​</a></h3>
<p>Faster non-cryptographic hash is needed. One suitable algorithm for this task is FNV. It is simple enought to implement and run fast.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public int hashCode() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    long hash = 0x811C9DC5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    long prime = 0x01000193;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (byte b : bytes) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hash = hash ^ b;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hash *= prime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return (int) hash;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="o5-skipping-synchronization">O5. Skipping synchronization<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#o5-skipping-synchronization" class="hash-link" aria-label="Direct link to O5. Skipping synchronization" title="Direct link to O5. Skipping synchronization">​</a></h3>
<p>With such huge load synchronization is too slow. It is fine from more coarse grained control flow, but 100 million is just too much. So optimization is to use separate threads each with separate hashmap. Then merge hashmaps after the work is done. As number of hashmaps will be several orders of magnitude less than rows then merging time will be negligible.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="o6-off-heap-memory">O6. Off heap memory<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#o6-off-heap-memory" class="hash-link" aria-label="Direct link to O6. Off heap memory" title="Direct link to O6. Off heap memory">​</a></h3>
<p>We could use Unsafe to skip array bounds checking for example. But much better way is avoid allocating data on the heap alltogether. With mapping file chunks directly to memory we can easily achieve that. We get MemorySegment and invoke methods which are "native" to get fast access.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="07-aligning-array-address-to-the-multitude-of-8-bytes">07. Aligning array address to the multitude of 8 bytes<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#07-aligning-array-address-to-the-multitude-of-8-bytes" class="hash-link" aria-label="Direct link to 07. Aligning array address to the multitude of 8 bytes" title="Direct link to 07. Aligning array address to the multitude of 8 bytes">​</a></h3>
<p>There is performance penalty for accessing unaligned data, which has to be padded either way. So we can remap all the data in segment once and then enjoy the benefits of reading values in multitudes of 8-bytes (longs).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="final-version">Final version<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#final-version" class="hash-link" aria-label="Direct link to Final version" title="Direct link to Final version">​</a></h3>
<p>The final version uses all above techniques and gets decent peformance. The file is split into 100MB chunks which are memory mapped by each thread. They are executed in form of ForkJoinPool task and run on common pool which has concurrency level same as numer of threads.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class Measurement {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int min = Integer.MAX_VALUE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int max = Integer.MIN_VALUE;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int sum = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int count = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Measurement(int value) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.min = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.max = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.sum = value;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.count = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String toString() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return round(min / 10.0) + "/" + round(max / 10.0) + "/" + round((sum / 10.0) / count);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static double round(double value) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Math.round(value * 10.0) / 10.0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class FastKey implements Comparable&lt;FastKey&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private byte[] bytes;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int hash;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static final Charset charset = Charset.forName("UTF-8");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public FastKey(MemorySegment segment) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bytes = segment.toArray(ValueLayout.OfByte.JAVA_BYTE);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long hash = 0x811C9DC5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        long prime = 0x01000193;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (byte b : bytes) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hash = hash ^ b;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hash *= prime;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.hash = (int) hash;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int hashCode() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return this.hash;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public boolean equals(Object obj) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (obj == this) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (!(obj instanceof FastKey)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Arrays.equals(bytes, ((FastKey) obj).bytes);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int compareTo(FastKey o) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return Arrays.compare(bytes, o.bytes);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String toString() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new String(bytes, charset);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">class ComputeMeasurementsPartTask implements Callable&lt;Map&lt;FastKey, Measurement&gt;&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int start;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private int end;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private static final Charset charset = Charset.forName("UTF-8");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private MemorySegment segment;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private byte getByte(int index) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return segment.get(ValueLayout.OfByte.JAVA_BYTE, index);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private long getLong(int index) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return segment.get(ValueLayout.OfLong.JAVA_LONG, index);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public ComputeMeasurementsPartTask(int start, int end, int limit, FileChannel channel) throws IOException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.segment = channel.map(FileChannel.MapMode.READ_ONLY, start, limit - start, Arena.global());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int s = start, s2 = start, e = end;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (s != 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            while (getByte(s - s2) != 0x0a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                s++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (e &lt; limit &amp;&amp; getByte(e - s2) != 0x0a) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int prefix = s % 8;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        MemorySegment padded = Arena.global().allocate(e - s + prefix);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        padded.asSlice(prefix).copyFrom(segment.asSlice(s - s2, e - s));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.segment = padded;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.start = prefix;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.end = e - s + prefix;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private void doActualWork(int start, int end, Map&lt;FastKey, Measurement&gt; measurements) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int splitIndex = start;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        while (getByte(splitIndex) != 0x3b) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            splitIndex++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var key = new FastKey(segment.asSlice(start, splitIndex - start));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        boolean negative = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int ind = splitIndex + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (getByte(ind) == (byte) '-') {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            negative = true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ind++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int v = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (end - ind == 4) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v = v * 10 + getByte(ind++) - '0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v = v * 10 + getByte(ind++) - '0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ind++; // '.'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v = v * 10 + getByte(ind) - '0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v = getByte(ind++) - '0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ind++; // '.'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v = v * 10 + getByte(ind) - '0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int val = negative ? -v : v;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var _v = measurements.get(key);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (_v != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (val &lt; _v.min) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                _v.min = val;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (val &gt; _v.max) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                _v.max = val;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            _v.sum += val;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            _v.count++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            measurements.put(key, new Measurement(val));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Map&lt;FastKey, Measurement&gt; call() throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var measurements = new HashMap&lt;FastKey, Measurement&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int prev = start;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int i = 0; i &lt; end; i += 8) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (i + 8 &lt; end) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long word = getLong(i);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long match = word ^ 0x0a0a0a0a0a0a0a0aL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                long line = (match - 0x0101010101010101L) &amp; (~match &amp; 0x8080808080808080L);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (line == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    i += 8;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    continue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                int next = i + (Long.numberOfTrailingZeros(line) &gt;&gt;&gt; 3);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                doActualWork(prev, next, measurements);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                prev = next + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                doActualWork(prev, end, measurements);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return measurements;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class CalculateAverage_dg {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static final String FILE = "./measurements.txt";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FileChannel channel = FileChannel.open(Path.of(CalculateAverage_dg.FILE), StandardOpenOption.READ);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var parts = new ArrayList&lt;Map&lt;FastKey, Measurement&gt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var futures = new ArrayList&lt;Future&lt;Map&lt;FastKey, Measurement&gt;&gt;&gt;();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int fileSize = (int) Files.size(Path.of(FILE));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int chunkSize = 20 * 1024 * 1024;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int noOfThreads = fileSize / chunkSize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int i = 0; i &lt; noOfThreads; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int start = i * chunkSize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int end = Math.min((i + 1) * chunkSize, fileSize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int limit = Math.min((i + 1) * chunkSize + 1024, fileSize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            var task = new ComputeMeasurementsPartTask(start, end, limit, channel);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            futures.add(ForkJoinPool.commonPool().submit(task));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (var future : futures) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            parts.add(future.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var measurements = parts.stream().flatMap(map -&gt; map.entrySet().stream())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .collect(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        Collectors.toMap(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                Map.Entry::getKey,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                Map.Entry::getValue,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                (e1, e2) -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    e1.min = Integer.min(e1.min, e2.min);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    e1.max = Integer.max(e1.max, e2.max);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    e1.sum += e2.sum;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    e1.count += e2.count;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    return e1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                }));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var sorted = new TreeMap&lt;&gt;(measurements);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(sorted);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The time is impressive:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">time ./calculate_average_dg.sh </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m1,465s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m8,505s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0,526s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For comparison this is the time of top solution from the leaderboard.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">time ./calculate_average_thomaswue.sh </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real    0m0,794s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">user    0m5,032s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sys     0m0,199s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So it is "only" two times slower than the best. I don't know how would that translate to the leaderboard. But this guy is actually founder of GraalVM so he definitely knows what he is doing.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2024/10/29/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<ul>
<li>ConcurrentHashMap is suprisingly fast, without good background it would be hard to write something faster</li>
<li>Off-heap memory gives considerable performance boost</li>
<li>Reading file as longs is a nice trick that I didn't know up to date</li>
</ul>]]></content>
        <category label="java" term="java"/>
        <category label="optimization" term="optimization"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Topology graphs are important (and fun)]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2024/10/26/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2024/10/26/"/>
        <updated>2024-10-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Recently I watched the presentation from Microsoft about Radius. They developed the tool to foster the collaboration between devops and developers. In nutshell devops create "recipies" in Bicep or Terraform and developers use them to deploy the application. Seems cool.]]></summary>
        <content type="html"><![CDATA[<p>Recently I watched the presentation from Microsoft about Radius. They developed the tool to foster the collaboration between devops and developers. In nutshell devops create "recipies" in Bicep or Terraform and developers use them to deploy the application. Seems cool.</p>
<p>However this is not the topic for this article. They mentioned the idea that instantly clicked in my head. That is - we waste so much of our time when interacting with kubernetes. Imagine you want to learn why app is not working and you know that it depends on "downstream" app. So you start with the deployment, it's fine, then you go to the code and find out the k8s service name that it's using. Then by labels or simply by name you find the dependent deployment that is failing. So we had 3 context switches. What about the dependencies that are &gt; 2 links deep?</p>
<p>Exactly this is just too much work. There is a better way to handle things. We draw graph where deployments are nodes and edges are dependencies. This was briefly mentioned in the presentation however it was not main topic. But the concept is not new. Openshift as much as I was able to reasearch had it 5 years ago already.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="topology-view-in-openshift">Topology view in OpenShift<a href="https://your-docusaurus-site.example.com/blog/2024/10/26/#topology-view-in-openshift" class="hash-link" aria-label="Direct link to Topology view in OpenShift" title="Direct link to Topology view in OpenShift">​</a></h2>
<p>One picture worth thousand of words:</p>
<p><img decoding="async" loading="lazy" src="https://your-docusaurus-site.example.com/assets/images/scshot-1-19ec64f5808ce7319aa9118cd1c8fc63.png" width="1337" height="670" class="img_ev3q"></p>
<p>What if the postres went down? Then it would look like this:</p>
<p><img decoding="async" loading="lazy" src="https://your-docusaurus-site.example.com/assets/images/scshot-2-43acdece9487f0dc149b1baf7e3ab406.png" width="198" height="182" class="img_ev3q"></p>
<p>I mean not exactly, it would be rounded in red circle, but you get the picture. You can instantly see.</p>
<p>What is more you can view its code with Eclipse Che by deploying own workspace. Committing changes with git is whole different story...</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="whats-under-the-hood">What's under the hood<a href="https://your-docusaurus-site.example.com/blog/2024/10/26/#whats-under-the-hood" class="hash-link" aria-label="Direct link to What's under the hood" title="Direct link to What's under the hood">​</a></h3>
<p>I clicked away all this in OpenShift but the real use case would be deploying apps with helm. So how is it done?</p>
<p>As it turns out these are just plain labels and annotations.</p>
<p>First the simple stuff:</p>
<p><img decoding="async" loading="lazy" src="https://your-docusaurus-site.example.com/assets/images/scshot-3-cae90e7495ec629724aaf8728eca9371.png" width="178" height="169" class="img_ev3q"></p>
<p><strong>How would you get the "Go" picture? Very simple:</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kubectl label deployments go-basic app.openshift.io/runtime=golang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>How would you group applications together?</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kubectl label deployments go-basic app.kubernetes.io/part-of=sample-app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl label deployments frontend app.kubernetes.io/part-of=sample-app</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>How would you get the dependency-arrows?</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kubectl annotate deployments frontend 'app.openshift.io/connects-to=[{"apiVersion":"apps/v1","kind":"Deployment","name":"go-basic"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So there is no magic here. These are just plain labels and annotations and the beauty is that they don't even interfere with your workflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-standard-labelsannotations">Kubernetes standard labels/annotations<a href="https://your-docusaurus-site.example.com/blog/2024/10/26/#kubernetes-standard-labelsannotations" class="hash-link" aria-label="Direct link to Kubernetes standard labels/annotations" title="Direct link to Kubernetes standard labels/annotations">​</a></h2>
<p>Kubernetes standard labels/annotations</p>
<p><strong>app.kubernetes.io/name</strong></p>
<p>This is the name of the application</p>
<p><strong>app.kubernetes.io/instance</strong></p>
<p>This is the name of the replica/instance in case you have many applications. You can think of it as blueprint - object pattern.</p>
<p><strong>app.kubernetes.io/version</strong></p>
<p>No explanation needed</p>
<p><strong>app.kubernetes.io/component</strong></p>
<p>Not sure what this does, but probably some categorization backend versus frontend.</p>
<p><strong>app.kubernetes.io/part-of</strong></p>
<p>We have seen it that it groups apps in OpenShift.</p>
<p><strong>app.kubernetes.io/managed-by</strong></p>
<p>I would recommend avoiding it, as it interferes with OpenShift topology rendering.</p>
<p>What you could do in couple of minutes, you can do in seconds. Viewing graphs instead of list of resources enables you to debug the system faster and hassle free.</p>]]></content>
        <category label="k8s" term="k8s"/>
        <category label="openshift" term="openshift"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing own Kubernetes operator in Java]]></title>
        <id>https://your-docusaurus-site.example.com/blog/2024/10/4/</id>
        <link href="https://your-docusaurus-site.example.com/blog/2024/10/4/"/>
        <updated>2024-10-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Operators introduced by CoreOS in 2016 are now considered early majority on Categories of Adopters scale.]]></summary>
        <content type="html"><![CDATA[<p>Operators introduced by <a href="https://www.redhat.com/en/blog/introducing-operators-putting-operational-knowledge-into-software" target="_blank" rel="noopener noreferrer">CoreOS</a> in 2016 are now considered early majority on Categories of Adopters scale.</p>
<p>It means that the technology is becoming pretty mainstream. They use Kubernetes Server API to enforce some operational patterns for a deployment of application. This way application developers can translate the "domain" knowledge to Kubernetes land.</p>
<p>I experimented with them lately, but not enough skills of Go discouraged me at first. But then I realised that I can try to write an Operator in my "mother tonque" - Java. In this post I will share couple of reflections on the topic.</p>
<p><strong>TLDR</strong> <a href="https://github.com/vulture-dominiczek/operator-hello-world" target="_blank" rel="noopener noreferrer">Here</a> is the hello world I wrote.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="anatomy-of-an-operator">Anatomy of an operator<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#anatomy-of-an-operator" class="hash-link" aria-label="Direct link to Anatomy of an operator" title="Direct link to Anatomy of an operator">​</a></h2>
<p>First and most important of all, <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener noreferrer">Operator</a> is an extension to Kubernetes. The core idea is to capture what human operator/admin would normally do and encode it in software.</p>
<p>At some point when Kubernetes was adopted by more and more users there occured an obvious need to extend it's API. A <strong>resource</strong> in Kubernetes is an endpoint that groups several API objects. That is for example pods resource groups pods and allows actions like <strong>get, delete, patch</strong> and so on to be acted on them.</p>
<p>But operators are extension to the system so there must be a way to represent their objectives Kubernetes (declarative) proper way. And there is - <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener noreferrer">Custom Resources</a>.</p>
<p>Whenever you write a new Operator, you will want to create custom resource for it. As soon as you register your custom resouce in Kubernetes it will start to serve it from API Server and all actions like get, delete and others will be available. And then your Operator will monitor this new resource and take appropirate actions when desired.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="control-loop">Control loop<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#control-loop" class="hash-link" aria-label="Direct link to Control loop" title="Direct link to Control loop">​</a></h4>
<p>Demystification no. 1 is that Operators are nothing new. Kubernetes is driven internally by Controllers. From the definition they implement <strong>control loop</strong>.</p>
<p>Funny thing, the term is actually taken from robotics and it is <em>nonterminating loop that corrects the state of the system</em>. What does it mean? For example one simple controller could watch that the certain pod is present in system all the times. Whenever it detects that pod is down it will take steps to restart it and correct the "glitch".</p>
<p>Now, operators are basically the same thing, but as a form of extension. Kubernetes is very permissive when it comes to it's API. So as long as you can reach the Server API (and have rights) then you can do any thing with it. So here is the thing -- operator is a custom controller. But: when it boils down to it's core -- it's just a pod! Like any other. I mean you will probably want to add replication, leader election and so on, but this is still a piece of software with an access to Kubernetes API.</p>
<p><img decoding="async" loading="lazy" src="https://your-docusaurus-site.example.com/assets/images/public_cloud-containers_orchestration-managed_kubernetes-installing-go-operator-images-operator-818e1c5c2f9f798bee5791f086521857.png" width="640" height="196" class="img_ev3q"></p>
<p>To sum up: operator watches events from the server (it can), or reads the status of current resources and matches that with whats specified in CRD. If there is a mismatch it does <strong>reconcillation</strong>. This is just another term for control loop. But outside Kubernetes core API.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-client-in-java">Kubernetes Client in Java<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#kubernetes-client-in-java" class="hash-link" aria-label="Direct link to Kubernetes Client in Java" title="Direct link to Kubernetes Client in Java">​</a></h4>
<p>Go to solution when dealing in Kubernetes in Java is Fabric8 client. You also want to watch this presentation.</p>
<p>You init the client very easily:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">KubernetesClient client = new KubernetesClientBuilder().build();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And then there is a matter of reading the api and ivoking appropirate methods:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var currentServingDeploymentNullable = client.apps().deployments().inNamespace("default")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .withName("web-serving-app-deployment").get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var currentServingDeployment = Optional.ofNullable(currentServingDeploymentNullable);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="informers">Informers<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#informers" class="hash-link" aria-label="Direct link to Informers" title="Direct link to Informers">​</a></h4>
<p>So, the basic idea is to forever run the control loop, sleep couple of seconds and do everthing again. But this is not the best way to do this. Ideally you would want to only do work when something changes. Actually you can do this easily as well.</p>
<p>Kubernetes has a notion of informers. These are WebSocket connections-subscriptions to changes of particular resources. So for example, you could watch all the pods in the namespace for changes and get informed when anything changes at all.</p>
<p>This leads to following solution - in the end of reconcillation block on the monitor:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private static Object changes = new Object();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">synchronized (changes) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    changes.wait();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Whenever something changes our informer will let us unblock the control loop:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var handler = new GenericResourceEventHandler&lt;&gt;(update -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    synchronized (changes) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        changes.notifyAll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crdClient.inform(handler).start();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The Callback is a little bit bloated so I abstracted it away like so:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class GenericResourceEventHandler&lt;T&gt; implements ResourceEventHandler&lt;T&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final Consumer&lt;T&gt; handler;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public GenericResourceEventHandler(Consumer&lt;T&gt; handler) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.handler = handler;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void onAdd(T obj) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.handler.accept(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void onUpdate(T oldObj, T newObj) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.handler.accept(newObj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void onDelete(T obj, boolean deletedFinalStateUnknown) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.handler.accept(null);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="deployment">Deployment<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#deployment" class="hash-link" aria-label="Direct link to Deployment" title="Direct link to Deployment">​</a></h4>
<p>So when you are done with the implementation you will probably want to deploy the operator... I wrote it as the Spring Boot application and some interesting stuff happened on the way.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tip-1">Tip 1<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#tip-1" class="hash-link" aria-label="Direct link to Tip 1" title="Direct link to Tip 1">​</a></h4>
<p>You will want to have a private repository, and I chose GHCR. You can set it up and download the passcode. Then create secret for kubernetes:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kubectl create secret docker-registry regcred \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --docker-server=ghcr.io \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --docker-username=dgawlik \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --docker-password=$GITHUB_TOKEN</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tip-2">Tip 2<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#tip-2" class="hash-link" aria-label="Direct link to Tip 2" title="Direct link to Tip 2">​</a></h4>
<p>You have to create CRD of course. Actually fabric8 client got you covered:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> &lt;dependency&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;groupId&gt;io.fabric8&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;artifactId&gt;kubernetes-client&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;version&gt;6.13.4&lt;/version&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/dependency&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;dependency&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;groupId&gt;io.fabric8&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;artifactId&gt;crd-generator-apt&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;version&gt;6.13.4&lt;/version&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;scope&gt;provided&lt;/scope&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/dependency&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Whenever you create CRD classes it will generate the CRD manifest so you can kubectl apply it. So for example:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Group("com.github.webserving")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Version("v1alpha1")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ShortNames("websrv")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class WebServingResource extends CustomResource&lt;WebServingSpec, WebServingStatus&gt; implements Namespaced {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public record WebServingSpec(String page1, String page2) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public record WebServingStatus (String status) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tip-3">Tip 3<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#tip-3" class="hash-link" aria-label="Direct link to Tip 3" title="Direct link to Tip 3">​</a></h4>
<p>You will want to create native images with GraalVm to speed things up. If you don't have a lot of memory then you can tradeoff the quality of binary for building time/resources.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;build&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;plugins&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;plugin&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;groupId&gt;org.graalvm.buildtools&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;artifactId&gt;native-maven-plugin&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;configuration&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &lt;buildArgs&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;buildArg&gt;-Ob&lt;/buildArg&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &lt;/buildArgs&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;/configuration&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;/plugin&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;plugin&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;configuration&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &lt;image&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;publish&gt;true&lt;/publish&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;builder&gt;paketobuildpacks/builder-jammy-full:latest&lt;/builder&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;name&gt;ghcr.io/dgawlik/webpage-serving:1.0.5&lt;/name&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;env&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        &lt;BP_JVM_VERSION&gt;21&lt;/BP_JVM_VERSION&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;/env&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &lt;/image&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &lt;docker&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;publishRegistry&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        &lt;url&gt;https://ghcr.io/dgawlik&lt;/url&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        &lt;username&gt;dgawlik&lt;/username&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        &lt;password&gt;${env.GITHUB_TOKEN}&lt;/password&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    &lt;/publishRegistry&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &lt;/docker&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            &lt;/configuration&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;/plugin&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/plugins&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/build&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And second when you set publish property to true, the package step will automatically push the image to your repositry.</p>
<p>The third - you pass -Ob parameter to GraalVM. This will insturct the runtime to do fastest, cheapest build possible. And of course - BP_JVM_VERSION has to be java of your project or things will not work.</p>
<p>And last thing -- if you want debug the container, you will have to choose paketobuildpacks/builder-jammy-full<!-- -->:latest<!-- --> as other buildpacks don't include shell (shame).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/blog/2024/10/4/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>I haven't covered everything, but everything else is in the repo. The repo is proof of concept that operators in Java are not complicated at all. I would say that even they are easier than in Go. So in the repo you will find following:</p>
<ul>
<li>spring-boot static server</li>
<li>operator that watches CRD and mounts config maps in server so that it can serve the websites from the CRD</li>
</ul>
<p>So this basically is Operator hello world.</p>]]></content>
        <category label="k8s" term="k8s"/>
        <category label="java" term="java"/>
        <category label="devops" term="devops"/>
    </entry>
</feed>